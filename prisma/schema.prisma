generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Jobpost {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  requirement   String
  package       String // 10 LPA etc 
  type          String // full-time, part-time, internship, etc.
  qualification String
  location      String
  category      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  candidates Candidate[]
}

model Candidate {
  id            Int      @id @default(autoincrement())
  name          String
  email         String   @unique
  phone         String
  resumeUrl     String?
  location      String
  jobpostId     Int
  status        String
  experience    String
  address       String
  qualification String
  parsedText    String?
  testScore     Float?
  testStatus    String   @default("pending") // pending, passed, failed
  appliedAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  jobpost Jobpost @relation(fields: [jobpostId], references: [id])

  interviews        Interview[]         @relation("CandidateToInterview")
  RecruitmentStatus RecruitmentStatus[]
  Offer             Offer[]
}

model Interview {
  id          Int      @id @default(autoincrement())
  candidateId Int
  interviewer String
  round       Int // 1 or 2
  result      String // cleared, rejected, no show
  scheduledAt DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  candidate Candidate @relation("CandidateToInterview", fields: [candidateId], references: [id])
}

model RecruitmentStatus {
  id          Int       @id @default(autoincrement())
  candidateId Int
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model Offer {
  id          Int       @id @default(autoincrement())
  candidateId Int
  offerLetter String // URL 
  sendAt      DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Candidate   Candidate @relation(fields: [candidateId], references: [id])
}
